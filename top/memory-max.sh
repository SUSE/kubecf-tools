#!/bin/bash

## Given the path to a file generated by `top-iterated.sh` it
## determines the max memory usage per job and returns the relevant
## information to stdout.

log="${1}" ; shift

if test -z "${log}"
then
    echo 1>&2 "Usage: $0 log"
    exit 1
fi

# Split the report across group+jobs.
while read epoch group job cpu memory
do
    echo "${group}" "${job}" "${memory}" >> "$$.${group}.${job}"
done < "${log}"

# Retrieve and report max memory per group+job combination
for gjobfile in $$.*
do
    sort -u < "${gjobfile}" | sort -k 3,4 -n | tail -1
done | sort

# Clear temp
rm -f $$.*
exit
